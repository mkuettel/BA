/'
vim: syntax=plantuml
'/
@startuml
skinparam dpi 300
skinparam scale 5/5
skinparam defaultFontName "Arial"

skinparam nodesep 25
skinparam ranksep 15
skinparam BoxPadding 8
skinparam Padding 8

skinparam component {
    BackgroundColor Orange
}

' legend bottom left
    ' Legende
    ' | Farbe | Feature |
    ' |<#Yellow>| Excel Import |
    ' |<#LawnGreen>| Metrik: Dichte |
    ' |<#Aqua>| Metrik: Kritische Knoten |
    ' |<#Orange>| Verwendet von mehreren Features |
' endlegend



frame "Tester" as tester {
  database deployconfig as "**Deployment Konfiguration**"

  [nixops] .left.> testhost : erstellt
  [nixops] .right.> deployconfig : verwendet
}



frame "Testhost VM" as testhost {
  database testconfig as "
    **Konfiguration**
    ===
    - Testkonfiguration
    - I2Pd-Konfigurationsdateien
    - Server-Tunnel Konfiguration
  "

  database messresultate


  package "Docker" {
    database shared_volumes as "
    **Shared Volumes**
    ===
    **reseed-netdb**:
    Router-Infos zum
    Bootstrapping
    ---
    **i2pd-data**:
    i2pd Daten-Verzeichnis
    Nachrichten-Log
    (F端r jeden Knoten 1mal)
    "

    () "Docker Socket" as dockersock
    [Docker Daemon] as dockerd

    dockersock - dockerd
    dockerd .> container : erstellt
    dockerd ..> messresultate : f端llt
    dockerd ..> shared_volumes : erzeugt
  }

  package "Messen" {
    database messresultate as "
    **Messresultate**
    ===
    Container Ausgaben
    Nachrichten-Logs
    Ressourcenauslastung
    "
    [Messskript] as measure

    measure ..right..> messresultate : sammelt
    measure .down.> dockersock : benutzt
    measure .left.> testconfig : benutzt

  }

  package "Container Deployment" as containerdeployment {
    database compose_config as "
    **Konfigurationsdateien**
    **f端r docker-compose**
    "

    [docker-compose]

    [recompose script] as recompose
    recompose .right.> [docker-compose] : startet
    recompose .up.> testconfig : benutzt

    [docker-compose] ..> compose_config : verwendet
    [docker-compose] .right.> dockersock : benutzt

    recompose .right.> shared_volumes : bef端llt
    recompose ..> compose_config : generiert
    recompose .right.> dockersock : benutzt
  }


}



frame "I2P-Testnetzwerk" as container {
    () "HTTPS" as reseed_https

    package "reseed Container" as reseed {
        [Reseed Server] as reseeder

        reseeder -left- reseed_https
        reseeder .up.> shared_volumes : benutzt
    }

    package "i2pd Container" as i2pd {
        () "TCP Tunnel" as sertun
        () "Socks5" as socks5

        [TCP Server] as tcpsrv

        tcpsrv ..> sertun : benutzt
        [TCP Client] ..> socks5 : benutzt

        [I2P Router] as i2p

        socks5 -left- i2p
        i2p -left- sertun

        i2p ..> reseed_https : benutzt
        i2p ..> shared_volumes : benutzt
        tcpsrv ..> shared_volumes : benutzt

    }
}


@enduml
